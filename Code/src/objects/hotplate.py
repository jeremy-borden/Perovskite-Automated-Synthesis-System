'''

import logging
import threading

import os
import sys
pp=os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.append(pp)


from drivers.adc_driver import ADC
from drivers.dac_driver import DAC
from time import sleep



class Hotplate(threading.Thread):
    MAX_TEMPERATURE_C: int = 540
    
    def __init__(self, dac: DAC, adc: ADC):
        super().__init__(name="Hotplate",daemon=True)
        self.dac = dac
        self.adc = adc
        
        self._current_temperature_c = 0
        self.target_temperature_c = 0
        self.logger = logging.getLogger("Main Logger")
    def set_temperature(self, temperature_c: int):
        if temperature_c > self.MAX_TEMPERATURE_C:
            return
        
        level = temperature_c/self.MAX_TEMPERATURE_C
        self.target_temperature_c = temperature_c
        self.dac.set_value(level)
        
    def get_temperature(self):
        return self._current_temperature_c
            
    def run(self):
        """Continuously read from the ADC to update temperature"""
        while True:
            self._current_temperature_c = self.adc.get_temperature()
            print(f"Temperature Read: {self._current_temperature_c} C")
            sleep(1)
            '''
'''
import os
import sys
pp=os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.append(pp)
            
import threading
import serial
import time
import logging

class Hotplate(threading.Thread):
    MAX_TEMPERATURE_C = 540

    def __init__(self, serial_port="/dev/ttyACM1", baud_rate=115200):
        super().__init__(name="Hotplate", daemon=True)
        self.serial_port = serial.Serial(serial_port, baud_rate, timeout=1)
        self._current_temperature_c = 0
        self.target_temperature_c = 0
        self.logger = logging.getLogger("Main Logger")
        time.sleep(2)

    def get_temperature(self):
        pass
        # command = "GET_TEMP\n"  # Ensure newline character is sent
        # ser.write(command.encode())  # Convert string to bytes & send
        # ser.flush()  # Ensure immediate sending

        # print(f"Sent: {command.strip()}")  # Debug: Print what was sent

        # response = ser.readline()  # Read response from Arduino
        # print(f"Raw Response: {response}")  # Debug: Print raw response

        # response = response.decode().strip()  # Convert bytes to string & clean up
    
        # if response.startswith("TEMP:"):
        #     return float(response.split(":")[1])  # Extract temperature
        # else:
        #     print("Error: Invalid temperature data received:", response)
        #     return None

        # while True:
        #     temperature = get_temperature()
        #     if temperature is not None:
        #         print(f"Temperature: {temperature} C")
        #     time.sleep(1)

        '''
        try:
            self._current_temperature_c = float(response)
        except ValueError:
            self.logger.error(f"Invalid temperature data: {response}")
        return self._current_temperature_c
        '''

    def set_temperature(self, temperature):
        """Send set temperature to Arduino"""
        self.target_temperature_c = temperature
        command = f"SET_TEMP {temperature}\n"
        self.serial_port.write(command.encode())

    def run(self):
        """Continuously update the temperature"""
        while True:
            self.get_temperature()
            print(f"Actual Temperature: {self._current_temperature_c:.2f} C")
            time.sleep(1)
'''
# if __name__ == "__main__":
#     hotplate = Hotplate()
#     hotplate.set_temperature(50)  # Example: Set temp to 50°C
#     hotplate.run()

# -*- coding: utf-8 -*-
"""hotplate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/175NiDS6_bgIkDaIlxQphXifoe6oEX1Ft
"""

import os
import sys
import threading
import serial
import time
import logging

# Add parent directory to sys.path if needed for external imports
pp = os.path.abspath(os.path.join(os.path.dirname(__file__), '../../'))
sys.path.append(pp)

class Hotplate(threading.Thread):
    MAX_TEMPERATURE_C = 540

    def __init__(self, serial_port="/dev/ttyACM1", baud_rate=115200):
        super().__init__(name="Hotplate", daemon=True)
        self.serial_port = serial.Serial(serial_port, baud_rate, timeout=1)
        self._current_temperature_c = 0
        self.target_temperature_c = 0
        self.logger = logging.getLogger("Main Logger")
        logging.basicConfig(level=logging.INFO)

        time.sleep(2)  # Allow time for Arduino to reset
        self.logger.info("Hotplate initialized and serial connection established.")

    def get_temperature(self):
        """Read actual temperature from Arduino via serial."""
        try:
            self.serial_port.write(b"GET_TEMP\n")
            response = self.serial_port.readline().decode().strip()
            self.logger.debug(f"Raw response: {response}")

            if response.startswith("TEMP:"):
                self._current_temperature_c = float(response.split(":")[1])
            else:
                self.logger.warning(f"Invalid response from Arduino: {response}")
        except Exception as e:
            self.logger.error(f"Error reading temperature: {e}")

        return self._current_temperature_c

    def set_temperature(self, temperature):
        """Send set temperature to Arduino."""
        if temperature > self.MAX_TEMPERATURE_C:
            self.logger.warning(f"Temperature {temperature} exceeds max limit of {self.MAX_TEMPERATURE_C}°C")
            return

        self.target_temperature_c = temperature
        command = f"SET_TEMP {temperature}\n"
        try:
            self.serial_port.write(command.encode())
            self.logger.info(f"Sent target temperature: {temperature}°C")
        except Exception as e:
            self.logger.error(f"Error sending temperature command: {e}")

    def run(self):
        """Continuously read temperature from Arduino."""
        self.logger.info("Hotplate thread started.")
        while True:
            temp = self.get_temperature()
            self.logger.info(f"Actual Temperature: {temp:.2f} °C")
            time.sleep(1)


if __name__ == "__main__":
    hotplate = Hotplate()
    hotplate.set_temperature(50)  # Example: Set target temperature to 50°C
    hotplate.start()  # Start background monitoring
